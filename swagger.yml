swagger: "2.0"
host: URL
basePath: /disco/v1
info:
  contact: {}
  description: |-
    FOSS Disclosure Portal automates and digitizes the process for disclosure of the Free and Open Source Software components, which are included in products and applications. It aims at a more efficient, transparent and digital software supply chain, enabling software suppliers to deliver information on used open source via a technical interface in a standardized exchange format as Software Bill of Materials (SBOM).

    SPDX-FileCopyrightText: 2024 Mercedes-Benz Tech Innovation GmbH
    SPDX-License-Identifier: MIT
  termsOfService: https://mb4.me/FOSS_Disclosure_Portal_ToU
  title: FOSS Disclosure Portal
  version: 1.0.3
schemes:
- https
securityDefinitions:
  Bearer:
    description: API key to authorize requests. DISCO xxxx.xxxx.xxxx.xxx
    in: header
    name: Authorization
    type: apiKey
paths:
  /projects/{uuid}:
    get:
      operationId: getProjectDetails
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project
          schema:
            $ref: '#/definitions/Project'
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
        "404":
          description: NotFound Error
          schema:
            $ref: '#/definitions/HttpError404'
      security:
      - Bearer: []
      summary: Get project details
  /projects/{uuid}/policyrules:
    get:
      operationId: getProjectPolicyRules
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Policy Rules
          schema:
            items:
              $ref: '#/definitions/PolicyRule'
            type: array
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
        "404":
          description: NotFound Error
          schema:
            $ref: '#/definitions/HttpError404'
      security:
      - Bearer: []
      summary: Get policy rules of project
  /projects/{uuid}/sbomcheck:
    post:
      consumes:
      - multipart/form-data
      operationId: getSBOMStatusInformation
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      - description: SBOM file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: SPDX Status Information
          schema:
            $ref: '#/definitions/SpdxStatusInformation'
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
        "417":
          description: Validation Error
          schema:
            $ref: '#/definitions/SpdxUploadResponse'
      security:
      - Bearer: []
      summary: Get status information of uploaded SBOM file
  /projects/{uuid}/schema:
    get:
      description: some description
      operationId: getProjectSchema
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Schema Details
          schema:
            type: string
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
        "404":
          description: NotFound Error
          schema:
            $ref: '#/definitions/HttpError404'
      security:
      - Bearer: []
      summary: Get project schema
  /projects/{uuid}/status:
    get:
      operationId: getProjectStatus
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project Status
          schema:
            $ref: '#/definitions/ProjectStatus'
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
        "404":
          description: NotFound Error
          schema:
            $ref: '#/definitions/HttpError404'
      security:
      - Bearer: []
      summary: Get project status
  /projects/{uuid}/versions:
    get:
      operationId: getProjectVersions
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Versions (also known as Channels)
          schema:
            items:
              type: string
            type: array
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
        "404":
          description: NotFound Error
          schema:
            $ref: '#/definitions/HttpError404'
      security:
      - Bearer: []
      summary: Get project versions (also known as channels)
    post:
      consumes:
      - application/json
      operationId: createProjectVersion
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      - description: Version (also known as Channel) Details
        in: body
        name: version
        required: true
        schema:
          $ref: '#/definitions/VersionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success Response
          schema:
            $ref: '#/definitions/SuccessResponse'
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
      security:
      - Bearer: []
      summary: Create project version (also known as channel)
  /projects/{uuid}/versions/{version}:
    get:
      operationId: getProjectVersionDetails
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      - description: 'Project Version (also known as Channel) e.g.: 1.0'
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Version (also known as Channel) Details
          schema:
            $ref: '#/definitions/VersionDetails'
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
        "404":
          description: NotFound Error
          schema:
            $ref: '#/definitions/HttpError404'
      security:
      - Bearer: []
      summary: Get version (also known as channel) details of project
  /projects/{uuid}/versions/{version}/ccs:
    get:
      operationId: getProjectVersionExternalSourceCodeReferences
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      - description: 'Project Version (also known as Channel) e.g.: 1.0'
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: External Source
          schema:
            items:
              $ref: '#/definitions/ExternalSource'
            type: array
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
        "404":
          description: NotFound Error
          schema:
            $ref: '#/definitions/HttpError404'
      security:
      - Bearer: []
      summary: Get external references to source code resources
    post:
      operationId: createProjectVersionExternalSourceCodeReferences
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      - description: 'Project Version (also known as Channel) e.g.: 1.0'
        in: path
        name: version
        required: true
        type: string
      - description: Source
        in: body
        name: source
        required: true
        schema:
          $ref: '#/definitions/SourceExternal'
      produces:
      - application/json
      responses:
        "200":
          description: Success Response
          schema:
            $ref: '#/definitions/SuccessResponse'
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
      security:
      - Bearer: []
      summary: Create external reference to source code resources
  /projects/{uuid}/versions/{version}/reviewremarks:
    get:
      operationId: getProjectVersionReviewRemarks
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      - description: 'Project Version (also known as Channel) e.g.: 1.0'
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Review remarks
          schema:
            items:
              $ref: '#/definitions/RemarkDto'
            type: array
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
        "404":
          description: NotFound Error
          schema:
            $ref: '#/definitions/HttpError404'
      security:
      - Bearer: []
      summary: Get review remarks for version (also known as channel)
  /projects/{uuid}/versions/{version}/sboms:
    get:
      operationId: getProjectVersionSPDXList
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      - description: 'Project Version (also known as Channel) e.g.: 1.0'
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Version (also known as Channel) History
          schema:
            items:
              $ref: '#/definitions/VersionHistory'
            type: array
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
        "404":
          description: NotFound Error
          schema:
            $ref: '#/definitions/HttpError404'
      security:
      - Bearer: []
      summary: Get SPDX list of project version (also known as channel)
    post:
      consumes:
      - multipart/form-data
      operationId: uploadSBOMAsSPDX
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      - description: 'Project Version (also known as Channel) e.g.: 1.0'
        in: path
        name: version
        required: true
        type: string
      - description: SPDX File
        in: formData
        name: file
        required: true
        type: file
      - description: SPDX Tag
        in: formData
        name: sbomTag
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: SPDX Upload Response
          schema:
            $ref: '#/definitions/SpdxUploadResponse'
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
        "417":
          description: Validation Error
          schema:
            $ref: '#/definitions/SpdxUploadResponse'
      security:
      - Bearer: []
      summary: Upload SBOM as SPDX
  /projects/{uuid}/versions/{version}/sboms/{sbomUuid}:
    get:
      operationId: getSBOMMetaForDelivery
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      - description: 'Project Version (also known as Channel) e.g.: 1.0'
        in: path
        name: version
        required: true
        type: string
      - description: 'UUID of the SBOM delivery or ''latest'' for the latest SBOM
          delivery e.g.: dummy-sbom-id---xxx-4413-yyy-24f060311111'
        in: path
        name: sbomUuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: SPDX Meta Data
          schema:
            $ref: '#/definitions/SpdxMetaData'
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
        "404":
          description: NotFound Error
          schema:
            $ref: '#/definitions/HttpError404'
      security:
      - Bearer: []
      summary: Get SBOM meta data for a specific delivery
  /projects/{uuid}/versions/{version}/sboms/{sbomUuid}/check:
    get:
      operationId: getProjectVersionSBOMStatus
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      - description: 'Project Version (also known as Channel) e.g.: 1.0'
        in: path
        name: version
        required: true
        type: string
      - description: 'UUID of the SBOM delivery or ''latest'' for the latest SBOM
          delivery e.g.: dummy-sbom-id---xxx-4413-yyy-24f060311111'
        in: path
        name: sbomUuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: SPDX Status Information
          schema:
            $ref: '#/definitions/SpdxStatusInformation'
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
        "404":
          description: NotFound Error
          schema:
            $ref: '#/definitions/HttpError404'
      security:
      - Bearer: []
      summary: Get SBOM status information of project version (also known as channel)
  /projects/{uuid}/versions/{version}/sboms/{sbomUuid}/notice/html:
    get:
      operationId: getSBOMNoticeFileHTML
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      - description: 'Project Version (also known as Channel) e.g.: 1.0'
        in: path
        name: version
        required: true
        type: string
      - description: 'UUID of the SBOM delivery or ''latest'' for the latest SBOM
          delivery e.g.: dummy-sbom-id---xxx-4413-yyy-24f060311111'
        in: path
        name: sbomUuid
        required: true
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: Notice File
          schema:
            type: string
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
        "404":
          description: NotFound Error
          schema:
            $ref: '#/definitions/HttpError404'
      security:
      - Bearer: []
      summary: Get notice file for specified SBOM formatted as HTML
  /projects/{uuid}/versions/{version}/sboms/{sbomUuid}/notice/json:
    get:
      operationId: getSBOMNoticeFileJSON
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      - description: 'Project Version (also known as Channel) e.g.: 1.0'
        in: path
        name: version
        required: true
        type: string
      - description: 'UUID of the SBOM delivery or ''latest'' for the latest SBOM
          delivery e.g.: dummy-sbom-id---xxx-4413-yyy-24f060311111'
        in: path
        name: sbomUuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Notice File
          schema:
            $ref: '#/definitions/NoticeFile'
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
        "404":
          description: NotFound Error
          schema:
            $ref: '#/definitions/HttpError404'
      security:
      - Bearer: []
      summary: Get notice file for specified SBOM formatted as JSON
  /projects/{uuid}/versions/{version}/sboms/{sbomUuid}/notice/text:
    get:
      operationId: getSBOMNoticeFileText
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      - description: 'Project Version (also known as Channel) e.g.: 1.0'
        in: path
        name: version
        required: true
        type: string
      - description: 'UUID of the SBOM delivery or ''latest'' for the latest SBOM
          delivery e.g.: dummy-sbom-id---xxx-4413-yyy-24f060311111'
        in: path
        name: sbomUuid
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Notice File
          schema:
            type: string
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
        "404":
          description: NotFound Error
          schema:
            $ref: '#/definitions/HttpError404'
      security:
      - Bearer: []
      summary: Get notice file for specified SBOM formatted as text
  /projects/{uuid}/versions/{version}/sboms/{sbomUuid}/tag:
    put:
      consumes:
      - application/json
      operationId: updateSpdxTag
      parameters:
      - description: 'Project UUID e.g.: dummy-id---xxx-4413-yyy-24f060311111'
        in: path
        name: uuid
        required: true
        type: string
      - description: 'Project Version (also known as Channel) e.g.: 1.0'
        in: path
        name: version
        required: true
        type: string
      - description: 'UUID of the SBOM delivery or ''latest'' for the latest SBOM
          delivery e.g.: dummy-sbom-id---xxx-4413-yyy-24f060311111'
        in: path
        name: sbomUuid
        required: true
        type: string
      - description: Tag
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/project.SPDXSetTagRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Success Response
          schema:
            $ref: '#/definitions/SuccessResponse'
        "401":
          description: Unauthorized Error
          schema:
            $ref: '#/definitions/HttpError'
        "417":
          description: Validation Error
          schema:
            $ref: '#/definitions/HttpError'
        "500":
          description: SPDX not found in history
          schema:
            $ref: '#/definitions/HttpError'
      security:
      - Bearer: []
      summary: Update SPDX Tag
definitions:
  ExternalSource:
    properties:
      comment:
        example: Test
        maxLength: 2000
        type: string
      created:
        example: "2023-06-02T20:14:11.358265366Z"
        type: string
      origin:
        example: UI
        type: string
      uploader:
        example: Name of Uploader
        type: string
      url:
        example: file:///SOME_PATH/PUBLIC/foss
        maxLength: 2000
        type: string
    required:
    - url
    type: object
  HttpError:
    properties:
      code:
        example: DISCOTOKEN_UNAUTHORIZED
        type: string
      message:
        example: DISCOTOKEN_UNAUTHORIZED
        type: string
      raw:
        example: 'Key: '''' Error:Field validation for '''' failed on the ''uuid''
          tag'
        type: string
      reqID:
        example: dummy-id----7c1ca33cb0d9c78dd5e9d0
        type: string
    type: object
  HttpError404:
    properties:
      code:
        example: PROJECT_TOKEN
        type: string
      message:
        example: Project uuid wrong
        type: string
      raw:
        example: 'Key: '''' Error:Field validation for '''' failed on the ''uuid''
          tag'
        type: string
      reqID:
        example: dummy-id----4c997f0cc6baaf11f936
        type: string
    type: object
  ListType:
    enum:
    - allow
    - deny
    - warn
    - NOT_SET
    type: string
    x-enum-varnames:
    - ALLOW
    - DENY
    - WARN
    - NOT_SET
  NoticeComponent:
    properties:
      copyright:
        example: Copyright
        type: string
      licenseID:
        example: MIT
        type: string
      licenseName:
        example: MIT License
        type: string
      name:
        example: '@some/component'
        type: string
      version:
        example: 7.19.6
        type: string
    type: object
  NoticeFile:
    properties:
      components:
        items:
          $ref: '#/definitions/NoticeComponent'
        type: array
      licenses:
        items:
          $ref: '#/definitions/NoticeLicence'
        type: array
      meta:
        $ref: '#/definitions/NoticeMetaData'
    type: object
  NoticeLicence:
    properties:
      id:
        example: MIT
        type: string
      name:
        example: MIT License
        type: string
      text:
        example: MIT License
        type: string
    type: object
  NoticeMetaData:
    properties:
      description:
        example: Description
        type: string
      title:
        example: Copyright notices and license information
        type: string
    type: object
  OverallReviewPublicResponse:
    properties:
      comment:
        example: This is a dummy project.
        type: string
      created:
        example: "2023-04-14T09:41:28.077559111Z"
        type: string
      sbomId:
        example: dummy-id-----6b9c-44a7-8e01-14e67ef4404a
        type: string
      sbomName:
        example: SBOM Name
        type: string
      sbomUploaded:
        example: "2023-03-12T08:30:17.077559111Z"
        type: string
    type: object
  PolicyRule:
    properties:
      created:
        example: "2023-03-21T04:45:00.806887937Z"
        type: string
      description:
        example: Example description
        type: string
      key:
        example: dummy-key-----4e42-a64a-c0b362976f9c
        type: string
      licenses:
        items:
          $ref: '#/definitions/PolicyRuleLicense'
        type: array
      name:
        example: Policy rule name
        type: string
      type:
        allOf:
        - $ref: '#/definitions/ListType'
        example: deny
      updated:
        example: "2023-07-11T11:26:07.440978865Z"
        type: string
    type: object
  PolicyRuleLicense:
    properties:
      identifier:
        example: AGPL-3.0-or-later
        type: string
      key:
        example: dummy-key-----cf422e8a94-03b3-4c6c-9954-8c183d7177cf
        type: string
      name:
        example: Name of license
        type: string
    type: object
  Project:
    properties:
      created:
        example: "2022-02-17T09:33:47.675838556Z"
        type: string
      description:
        example: This is a dummy project.
        type: string
      name:
        example: Dummy Project
        type: string
      schema:
        example: EnterpriseIt
        type: string
      updated:
        example: "2023-04-14T09:41:28.077559111Z"
        type: string
      uuid:
        example: dummy-id-----6b9c-44a7-8e01-14e67ef4404a
        type: string
    type: object
  ProjectStatus:
    properties:
      status:
        example: active
        type: string
      versionStatus:
        items:
          $ref: '#/definitions/VersionStatusPublicResponse'
        type: array
    type: object
  RemarkDto:
    properties:
      author:
        type: string
      closed:
        type: string
      componentId:
        type: string
      componentName:
        type: string
      componentVersion:
        type: string
      created:
        type: string
      description:
        type: string
      events:
        items:
          $ref: '#/definitions/reviewremarks.EventDto'
        type: array
      key:
        type: string
      level:
        type: string
      licenseId:
        type: string
      licenseName:
        type: string
      origin:
        type: string
      sbomId:
        type: string
      sbomName:
        type: string
      status:
        type: string
      title:
        type: string
      updated:
        type: string
    type: object
  SourceExternal:
    properties:
      _key:
        example: ""
        maxLength: 36
        type: string
      comment:
        example: Test
        maxLength: 2000
        type: string
      created:
        example: "2023-07-17T12:06:32.743823343Z"
        type: string
      fileSize:
        type: integer
      hash:
        maxLength: 50
        type: string
      origin:
        example: API
        type: string
      sourceType:
        allOf:
        - $ref: '#/definitions/SourceType'
        maxLength: 20
      uploader:
        example: Uploader
        type: string
      url:
        example: file:///SOME_PATH/PUBLIC/foss
        type: string
    type: object
  SourceType:
    enum:
    - external
    type: string
    x-enum-varnames:
    - ExternalLink
  SpdxMetaData:
    properties:
      created:
        example: "2023-06-13T07:58:40.572647367Z"
        type: string
      creators:
        example: Tool
        type: string
      id:
        example: SPDXRef-DOCUMENT
        type: string
      name:
        example: SBOM Demonstration/v2
        type: string
      status:
        type: boolean
      uploaded:
        example: "2023-06-13T07:58:40.572647367Z"
        type: string
      version:
        example: SPDX-2.2
        type: string
    type: object
  SpdxStatusComponent:
    properties:
      license:
        example: MIT
        type: string
      licenseRemarks:
        items:
          $ref: '#/definitions/SpdxStatusLicenceRemarks'
        type: array
      name:
        example: '@some/component'
        type: string
      policyRuleStatus:
        items:
          $ref: '#/definitions/SpdxStatusPolicy'
        type: array
      scanRemarks:
        items:
          $ref: '#/definitions/SpdxStatusScanRemarks'
        type: array
      spdxId:
        example: dummy-spdx-id----component23456
        type: string
      version:
        example: 7.19.6
        type: string
    type: object
  SpdxStatusInformation:
    properties:
      components:
        items:
          $ref: '#/definitions/SpdxStatusComponent'
        type: array
      disclaimer:
        example: Disclaimer
        type: string
      generalRemarks:
        example: Some general remarks
        type: string
      licenseRemarks:
        example: Some license remarks
        type: string
      scanRemarks:
        example: Some scan remarks
        type: string
    type: object
  SpdxStatusLicenceRemarks:
    properties:
      description:
        example: Description of license remarks
        type: string
      licenseMatched:
        example: MIT
        type: string
      remark:
        example: Display copyright notice
        type: string
      status:
        example: INFORMATION
        type: string
      type:
        example: obligation
        type: string
    type: object
  SpdxStatusPolicy:
    properties:
      description:
        example: Description of policy
        type: string
      licenseMatched:
        example: MIT
        type: string
      name:
        example: USE IT
        type: string
      type:
        allOf:
        - $ref: '#/definitions/ListType'
        example: allow
      used:
        type: boolean
    type: object
  SpdxStatusScanRemarks:
    properties:
      description:
        example: Description of scan remarks
        type: string
      remark:
        example: Display copyright notice
        type: string
      status:
        example: INFORMATION
        type: string
    type: object
  SpdxUploadResponse:
    properties:
      docIsValid:
        type: boolean
      fileUploaded:
        type: boolean
      hash:
        example: some-hash----b75f6c1ac76d1517bfef85
        type: string
      id:
        example: SPDXRef-DOCUMENT
        type: string
      validationFailedMessage:
        example: ""
        type: string
    type: object
  SuccessResponse:
    properties:
      message:
        example: Resource created
        type: string
      success:
        type: boolean
    type: object
  VersionDetails:
    properties:
      description:
        example: version description
        type: string
      lastSbomUploaded:
        example: "2023-05-15T10:52:39.187559111Z"
        type: string
      name:
        example: "1.0"
        type: string
      overallReview:
        $ref: '#/definitions/OverallReviewPublicResponse'
      status:
        example: unreviewed
        type: string
    type: object
  VersionHistory:
    properties:
      id:
        example: dummy-id----4672-ad7b-757530f2580b
        type: string
      name:
        example: SBOM Demonstration/v1
        type: string
      updated:
        example: "2023-05-26T06:20:36.051198856Z"
        type: string
      valid:
        example: false
        type: boolean
    type: object
  VersionRequest:
    properties:
      description:
        example: ""
        maxLength: 1000
        type: string
      name:
        example: "1.0"
        maxLength: 80
        minLength: 1
        type: string
    required:
    - name
    type: object
  VersionStatusPublicResponse:
    properties:
      lastSbomUploaded:
        example: "2023-05-15T10:52:39.187559111Z"
        type: string
      name:
        example: "1.0"
        type: string
      overallReview:
        $ref: '#/definitions/OverallReviewPublicResponse'
      status:
        example: unreviewed
        type: string
    type: object
  project.SPDXSetTagRequestDto:
    properties:
      tag:
        example: "1.0"
        maxLength: 80
        minLength: 1
        type: string
    required:
    - tag
    type: object
  reviewremarks.EventDto:
    properties:
      author:
        type: string
      authorFullName:
        type: string
      content:
        type: string
      created:
        type: string
      key:
        type: string
      type:
        type: string
      updated:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
